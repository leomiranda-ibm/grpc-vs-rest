// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: internal/proto/response.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ServerGrpc_GetUsers_FullMethodName = "/ServerGrpc/GetUsers"
)

// ServerGrpcClient is the client API for ServerGrpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServerGrpcClient interface {
	GetUsers(ctx context.Context, in *Null, opts ...grpc.CallOption) (*Response, error)
}

type serverGrpcClient struct {
	cc grpc.ClientConnInterface
}

func NewServerGrpcClient(cc grpc.ClientConnInterface) ServerGrpcClient {
	return &serverGrpcClient{cc}
}

func (c *serverGrpcClient) GetUsers(ctx context.Context, in *Null, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, ServerGrpc_GetUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServerGrpcServer is the server API for ServerGrpc service.
// All implementations must embed UnimplementedServerGrpcServer
// for forward compatibility
type ServerGrpcServer interface {
	GetUsers(context.Context, *Null) (*Response, error)
	mustEmbedUnimplementedServerGrpcServer()
}

// UnimplementedServerGrpcServer must be embedded to have forward compatible implementations.
type UnimplementedServerGrpcServer struct {
}

func (UnimplementedServerGrpcServer) GetUsers(context.Context, *Null) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (UnimplementedServerGrpcServer) mustEmbedUnimplementedServerGrpcServer() {}

// UnsafeServerGrpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServerGrpcServer will
// result in compilation errors.
type UnsafeServerGrpcServer interface {
	mustEmbedUnimplementedServerGrpcServer()
}

func RegisterServerGrpcServer(s grpc.ServiceRegistrar, srv ServerGrpcServer) {
	s.RegisterService(&ServerGrpc_ServiceDesc, srv)
}

func _ServerGrpc_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Null)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerGrpcServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerGrpc_GetUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerGrpcServer).GetUsers(ctx, req.(*Null))
	}
	return interceptor(ctx, in, info, handler)
}

// ServerGrpc_ServiceDesc is the grpc.ServiceDesc for ServerGrpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServerGrpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ServerGrpc",
	HandlerType: (*ServerGrpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUsers",
			Handler:    _ServerGrpc_GetUsers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/proto/response.proto",
}
